# Kraft80
# A Z80-based computer for nostalgic enthusiasts
# 2025 - ARMCoder
# Build Manual

General
=======

  So you're feeling adventurous and are planning to build the Kraft80, right?

Good! But first, let's go through some general recommendations.


  I don't want to discourage you but what I can say is that building this kind

of project is not for the faint of heart. This is not just about soldering parts

on a pre-laid-out PCB where everything has a well defined place and the chances

of making mistakes are low. In this type of build, mistakes will most certainly

happen! But with organization, patience and method, everything should be

allright.


  The main PCB, as seen in the pictures, is a universal 20 cm X 30 cm (about 8"

X 12" for you imperials!) single-size, single layer hole matrix. This size is

generous but not really excessive, especially because I may want to implement

new features (sound, maybe?) in the future.


Schematics First!
=================

  Despite the number of pages, the schematics is not very complex, but it's

very important to get familiar with it BEFORE starting the build. Try to 

understand what each component does and why it's located where it is. When the

build becomes hairy, a good familiarity with the project will save lots of time!


Recommended Instrumentation
===========================

  This is not a toy project, you will need a decent multimeter to check for
  
continuity and/or shorts (and you will do it A LOT!), and also an oscilloscope

to validate the clock and to help search for faults should things go awry.

  A reliable 5VCC power supply is needed to correctly feed the Kraft80. The two
  
common options are:

  - Workbench supply

  - USB from a PC or a phone charger
  

 I prefer the second option because I will always be sure that the voltage is
  
set to 5 volts. A workbench supply is great, but it's normally adjustable, and

one can change the voltage for other uses, and by mistake end up feeding the

Kraft80 with an improper voltage what can be disastrous to say the least.


Solder Tool
===========

  A good quality solder tool (and solder materials) is also needed for a precise

work without risk of shorting nearby connections or overheating the board or

components.


Other Tools
===========

  A decent cutter and pliers, a vacuum pump to remove excess solder, a wire
  
stripper, maybe a head-mounted lamp with magnifying glasses are also welcome.


  A PCB bench support may be a good idea, although it may be not easy to find

one that supports a board this large and heavy.


Wires for Logic Connections
===========================

  To make the connections, the best type of wire is the so called 'wire wrapping

wire', 28 or 30 AWG. 


Wires for Power Connections
===========================

  THe idea is to route most of the ground and power via 'tracks' laid directly

on the PCB with solder (see below), but often times it will be needed to

'bridge' these tracks with some jumpers, for this case I'd recommend a thicker

wire like 24 AWG. 


Other consumables
=================

  Low melt solder to help removing the conventional solder, if needed. Also,

a desoldering wick reel may be useful.


Laying Things Out
=================

  The layout I used in the build, that worked fairly well, is this one below:

+------------------------------------------------------------------------+
|                                                     +----------------+ |
|                                                     | KRAFT 80       | |
|                                                     | Z80 Computer   | |
|                                                     +----------------+ |
|                                                                        |
|                                                                        |
|                                                                        |
|                                                                        |
|                                                              USB-SERIAL|                                       
|                                                               +========+ 
|                                     U8   HW-209             ==|      ###
|                                    +============+           ==|      ###
|                                    |            |             +========+ 
|                                    |            |                      |
|                                    |            |       U95     U96    |
|                                    |            |       +-v-+   +-v-+  |
|      +==========================+  +============+       |   |   |   |  |
|     ###          J1             |                       |   |   |   |  |
|     ###                        ##   +========+    U92   |   |   |   |  |
|     ###     TANG NANO 9K       ##   |        |    +v+   |   |   |   |  |
|     ###          J2             |   +========+    | |   |   |   |   |  |
|      +==========================+   U13   YP-8    | |   |   |   |   |  |
|                                                   +-+   +---+   +---+  | 
|     U12                                           LS00  8251    8259   |
| +==========+         JP4    LCD16X2                                    |
| |          |    +===============================+       U98  U94  Y1   |
| |          |    |0                             0| POT   +v+  +v+  x-+  |
| |          |    |  +=========================+  | +--+  | |  | |  | |  |
| |          |    |  |#########################|  | |()|  | |  | |  | |  |
| |          |    |  |#########################|  | +--+  +-+  +-+  +-+  |
| +==========+    |  +=========================+  |  U1                  |
|     HW209       |0                             0| +-v-+      @         |
| JP1       ()    +=[||||||||||||||]==============+ |   |      |         |
| JP2     PWLED             U9          U90         |   |      |U2       |
| 0()                      +-v-+       +-v-+        |   |      +-v-+     |
| 1()    U5       U11      +-v-+       |   |        |   |      +-v-+     |
| 2()    +v+      +v+      |   |       |   |        |   |      |   |     |
| 3()    | |      | |      |   |       |   |        |   |      |   |JP8  |
| 4()    | |      | |      |   |       |   |        |   |      |ZIF|     |
| 5()    | |      | |      |   |       |   |        |   |      |   |     |
| 6()    | |      | |      |   |       |   |        |   |      |   |     |
| 7()    +-+      +-+      +---+       +---+        +---+      +---+     |
|LEDS    HC273    HC273    6116        62256        Z80        2816      |
|                          62256                               2864      |
|        U6                                                              |
|        +v+                        U3       U91                         |
| U93    | |      U7       U97      +v+      +v+      U4       U10  U99  |
| +v+    | |      +v+      +v+      | |      | |      +v+      +v+  +v+  |
| | |    | |      | |      | |      | |      | |      | |      | |  | |  |
| | |    | |      | |      | |      | |      | |      | |      | |  | |  |
| +-+    +-+      +-+      +-+      +-+      +-+      +-+      +-+  +-+  |
| LS08   LS245    LS02     LS32     LS138    LS138    4093     HC04 LS74 |
|                                                                        |
|                  []  []  []  []  []  []  []  []     []            ()() |
|                              BUTTONS               RESET          LEDS |
+------------------------------------------------------------------------+


NOTE: The LCD is the most NON-STANDARD thing I've ever met when it comes to

mechanical positioning. The pin numbers are standardized to their functions,

but their physical layout can vary widely. In some units the pins are numbered

straight 1 to 16, in others are 15-16 then 1 to 14, and there may be other odd

pin distributions. Furthermore, in some units the pins are located atop but in

the others they are below. Be careful to not end up mounting your display upside

down! In short, check carefully your display unit before assembly.


Sockets, sockets
================

  It's a VERY good practice to use quality sockets for the ICs - the machine

tooled ones are the best. You will be soldering a helluva wires and transfering 

a lot of heat to the board (in small amounts each time, but...), and those ICs

are delicate. Furthermore, you can be unlucky and get a DOA IC, and the socket

makes replacing it just like a Lego play. OTOH, replacing a directly soldered

IC normally involves desoldering several wires and a lot of trouble.


  Ordinary components (LEDs, resistors, caps, pushbuttons, crystals) must be

soldered directly.


First Steps: Layout and Power
=============================

  NOTE: FOR NOW, LET'S IGNORE THE SHEET 4 (VIDEO CONTROLLER). WE'LL TAKE CARE OF

IT LATER.

  Once you've decided for the overall layout (may be the one I've suggested, or

a different one), start placing the IC sockets and their associated ceramic

caps. Do not place the sockets too close to each other or to the PCB's edge,

always leave some free pads around the sockets.


  The next step is to lay the ground lines. They must be made, preferrably,

like 'tracks'. That can be done using solder to 'bridge' the PCB's pads into

pathways that run across the board. This is very hard to do with just solder, so

place a thin naked wire along the desired path and cover it with solder, over

the pads.


  Do the same with the VCC (+5V) lines.


  Then connect the VCC and GND pins from the IC sockets to these lines, and also

the filtering caps if you didn't do it yet. In general, we have for each IC:


                         IC SIZE   VCC  GND

                         14-pin     14   7
                         16-pin     16   8
                         20-pin     20  10
                         28-pin(*)  28  14

     (*) U95 and U96 DON'T follow this convention, check the schematics!


First Power Up
==============

  NOTE: DON'T INSTALL THE IC'S YET!!!
  

  At this point, you are safe to power up the board (NO IC'S INSTALLED!) for the
  
first time and check whether all IC'S sockets are receiving power.


  After EVERY IC socket checked for good VCC and GND (always double check with
  
the schematics!), we can power down and move forward.


RESET circuitry
===============

  The next step is to build the RESET circuitry (U4 and associated cap, diode, 

resistors and pushbutton). Now install U4 to its socket. Everything alright,

power up the board.

  
  The output must have +5V. Pressing the pushbutton, it should drop to about
  
zero, and go back when releasing the button.


CLOCK circuitry
===============

  The CLOCK is built around U10 with several small parts including a crystal,

check the schematics. Once build, you'll need an oscilloscope to check the 

output for a 4MHz signal (faster oscilloscopes will show a square signal, slower

ones will show a rounded, more sinus-like signal, it's OK in any case).
  

Building the Logic
==================

  Now we're really entering the fray. To make things easier, let's divide the

logic build in 3 stages:

  - STAGE 1: Sheets 1 & 2
  
  - STAGE 2: Sheet 3
  
  - Stage 3: Sheet 4 (at this point, no components/sockets placed yet).
  

  So, at this point, you can forget about Sheets 3 & 4 (TBH, you can install the

FTDI USB adapter from Sheet 3 to get USB power, but that's all for now).


Stage 1 Build
=============

  This is THE HARDEST part of the build because this is the computer's core. The

sheer amount of data and address lines is daunting to say the least. Don't ever

ever expect to do this stage in a single day.


  (The good news is that Sheets 3 & 4 are much easier - each one can be built in

a single day, maybe even both in a single day if your stamina is really high).


  You can test the build with the shipped programs 'Core Test 1' and 'Core Test
  
2'. The first is simpler and doesn't use any RAM, the second needs RAM to 

function and also makes a basic test on the RAM chips, indicating the result in

the LCD display.


Stage 2 Build
=============

  This is the simplest part to build. Sheet 3 has the 8251A UART, the 8259A

interrupt controller and the time base for the UART and the timer Interrupt. The

time base generates a 307.2 kHz clock for the UART and a 300 Hz clock for the

Timer interrupt.


  To test and use the serial port, there's the ROM image called 'Kraftmon'.


Stage 3 Build
=============

  Sheet 4 has the video controller. There are just 4 modules and not many 

connections but the modules's pinouts can be tricky. Check the bundled pictures

for more info:


  - TANG-NANO.jpg (the FPGA that implements the VGA controller)

  - HW-209.jpg    (level shifters since the Z80 'talks' in 5V and the NANO
                   'talks' in 3.3V)

  - YP-8.jpg      (voltage regulator to feed the NANO with 3V3 regulated power)
  
  
  It's recommended to not solder the NANO directly to the main board; instead,

use a pair of female MOLEX-24 headers, then plug the NANO when the rest is 

finished.


Programming the NANO FPGA as a VGA Controller
=============================================
  
  In order to work as a VGA controller, the NANO must to be programmed with a
  
special mass of data called 'bitstream'. This bitstream can be programmed in

volatile form (it lasts as long as the NANO is kept powered) or in non-volatile

form (the NANO will permanently work as a VGA controller until programmed again

with a new bitstream).


  For our project, we want to program the NANO in non-volatile mode. The 
  
bitstream file is supplied in the package and is called 'hdmi.fs'.


  The software tool used to program the NANO is the OpenFPGALoader. It's
  
available for Linux, Windows and Mac. I won't enter into the installation

details here, their home page is here:  

        https://trabucayre.github.io/openFPGALoader/

  
  In Ubuntu Linux, it's quite easy to install OpenFPGALoader because there's a

native repository, so 'sudo apt install openfpgaloader' should do the trick. 


  ## From now here I will assume a Linux environment ##


  Plug the NANO's USB-C end to the PC with a suitable cable.


  With the OpenFPGALoader installed, the Linux command usually is:

        sudo openFPGALoader -f hdmi.fs -d /dev/ttyUSBx

  Where '-f' says to write to the flash (non-volatile)
        '-d /dev/ttyUSBx' is the USB device found, it may be USB0, USB1, etc


  NOTE: There are optional installation steps that make it possible to run
  
openFPGALoader without the 'sudo' privilege tool. In the OpenFPGALoader's home

page there are installation instructions that cover these steps.   


